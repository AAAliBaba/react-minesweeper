{"ast":null,"code":"var _jsxFileName = \"/Users/arafatarman/Documents/ReactProjects/minesweeper/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Cell(props) {\n  // constructor(props) {\n  //     super(props);\n  //     this.state = {\n  //         row: this.props.row,\n  //         col: this.props.col,\n  //         value: this.props.value,\n  //         face: this.props.face,\n  //     }\n  // }\n  // onCellClick() {\n  //     // this.state.value === \"bomb\" ? this.setState({face: '*'}) : this.setState({face: this.state.value})\n  //     if(this.state.value === \"bomb\")\n  //     {\n  //         this.setState({face: '*'});\n  //     }\n  //     else\n  //     {\n  //         this.setState({face: this.state.value});\n  //     }\n  // }\n  // render() {\n  return (// <button className=\"cell\" onClick={() => this.onCellClick()}>\n    //     {this.state.face}\n    // </button>\n    React.createElement(\"button\", {\n      className: \"cell\",\n      onClick: props.onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, props.face)\n  ); // }\n}\n\nfunction init_board(arr) {\n  var count = 0;\n\n  while (count < 10) {\n    var rand_r = Math.floor(Math.random() * 9);\n    var rand_c = Math.floor(Math.random() * 9);\n\n    while (arr[rand_r][rand_c] === 'bomb') {\n      rand_r = Math.floor(Math.random() * 9);\n      rand_c = Math.floor(Math.random() * 9);\n    }\n\n    arr[rand_r][rand_c] = 'bomb';\n    count++;\n  }\n\n  var neighbor_rows = [-1, -1, -1, 0, 0, 1, 1, 1];\n  var neighbor_cols = [-1, 0, 1, -1, 1, -1, 0, 1];\n\n  for (var i = 0; i < 9; i++) {\n    for (var j = 0; j < 9; j++) {\n      if (arr[i][j] !== 'bomb') {\n        var cnt_mines = 0;\n\n        for (var k = 0; k < 9; k++) {\n          var row_to_check = i + neighbor_rows[k];\n          var col_to_check = j + neighbor_cols[k];\n\n          if (row_to_check < 0 || row_to_check > 9 || col_to_check < 0 || col_to_check > 9) {\n            continue;\n          } else {\n            try {\n              if (arr[row_to_check][col_to_check] === 'bomb') {\n                cnt_mines++;\n              }\n            } catch (error) {//some NaN/undefined error we can ignore\n            }\n          }\n        }\n\n        arr[i][j] = cnt_mines;\n      }\n    }\n  }\n\n  return arr;\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    var init = [];\n\n    for (var i = 0; i < 9; i++) {\n      init[i] = new Array(9);\n    }\n\n    init_board(init);\n    this.state = {\n      cells: init,\n      initial: init\n    };\n    /*would probably be wise to keep a copy of the initial game board, hence the dupe.\n    thinking this would help with doing the recursive reveals. */\n\n    for (var k = 0; k < 9; k++) {\n      for (var j = 0; j < 9; j++) {\n        var val = init[k][j];\n        init[k][j] = this.renderCell(k, j, val, null); //<Cell row={k} col={j} value={val} face={null}/>;\n      }\n    }\n\n    this.setState({\n      cells: init\n    });\n  }\n\n  handleClick(row, col, value) {\n    var revealed_cells = [];\n\n    for (var i = 0; i < 9; i++) {\n      revealed_cells[i] = new Array(9);\n    } //at this point revealed_cells is an empty 2D 9x9 array\n\n\n    alert(this.state.initial[row][col]);\n    var neighbor_rows = [-1, -1, -1, 0, 0, 1, 1, 1];\n    var neighbor_cols = [-1, 0, 1, -1, 1, -1, 0, 1];\n\n    for (var k = 0; k < 9; k++) {\n      for (var j = 0; j < 9; j++) {\n        if (k === row && j === col) {\n          //we are on the Cell that is clicked.\n          //at this point, the value can be either a 0, a number [1,8], or bomb -- 3 cases\n          var face;\n\n          if (value === 0) {\n            face = 0; //this means that there are NO mines in the neighboring cells.\n            //reveal all 8 neighbors.\n\n            for (var m = 0; m < neighbor_rows.length; m++) {\n              var row_to_check = k + neighbor_rows[m];\n              var col_to_check = j + neighbor_cols[m];\n\n              if (row_to_check < 0 || row_to_check > 9 || col_to_check < 0 || col_to_check > 9) {\n                continue;\n              }\n\n              var val = this.state.init[row_to_check][col_to_check]; // alert(\"\" + row_to_check + \" \" + col_to_check + \" \" + val);\n\n              this.handleClick(row_to_check, col_to_check, val);\n            }\n          } else if (value === 'bomb') {\n            face = '*';\n          } else {\n            face = value;\n          }\n\n          revealed_cells[k][j] = this.renderCell(row, col, value, face);\n        } else {\n          revealed_cells[k][j] = this.state.cells[k][j];\n        }\n      }\n    }\n\n    this.setState({\n      cells: revealed_cells\n    });\n  }\n\n  renderCell(r, c, v, f) {\n    return React.createElement(Cell, {\n      row: r,\n      col: c,\n      value: v,\n      face: f,\n      onClick: () => this.handleClick(r, c, v),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, this.state.cells);\n  }\n\n}\n\nclass Game extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"React.Minesweeper\"), React.createElement(Board, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }));\n  }\n\n}\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 204\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/arafatarman/Documents/ReactProjects/minesweeper/src/index.js"],"names":["React","ReactDOM","Cell","props","onClick","face","init_board","arr","count","rand_r","Math","floor","random","rand_c","neighbor_rows","neighbor_cols","i","j","cnt_mines","k","row_to_check","col_to_check","error","Board","Component","constructor","init","Array","state","cells","initial","val","renderCell","setState","handleClick","row","col","value","revealed_cells","alert","m","length","r","c","v","f","render","Game","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Cell(props) {\n    // constructor(props) {\n    //     super(props);\n    //     this.state = {\n    //         row: this.props.row,\n    //         col: this.props.col,\n    //         value: this.props.value,\n    //         face: this.props.face,\n    //     }\n    // }\n\n    // onCellClick() {\n    //     // this.state.value === \"bomb\" ? this.setState({face: '*'}) : this.setState({face: this.state.value})\n    //     if(this.state.value === \"bomb\")\n    //     {\n    //         this.setState({face: '*'});\n    //     }\n    //     else\n    //     {\n    //         this.setState({face: this.state.value});\n    //     }\n    // }\n\n    // render() {\n        return (\n            // <button className=\"cell\" onClick={() => this.onCellClick()}>\n            //     {this.state.face}\n            // </button>\n            <button className=\"cell\" onClick={props.onClick}>\n                {props.face}\n            </button>\n        );\n    // }\n}\n\nfunction init_board(arr) {\n    var count = 0;\n    while(count < 10)\n    {\n        var rand_r = Math.floor(Math.random() * 9);\n        var rand_c = Math.floor(Math.random() * 9);\n        while(arr[rand_r][rand_c] === 'bomb')\n        {\n            rand_r = Math.floor(Math.random() * 9);\n            rand_c = Math.floor(Math.random() * 9);\n        }\n        arr[rand_r][rand_c] = 'bomb';\n        count++;\n    }\n\n    var neighbor_rows = [-1, -1, -1, 0, 0,   1, 1, 1];\n    var neighbor_cols = [-1,  0,  1, -1, 1, -1, 0, 1];\n\n    for(var i = 0; i < 9; i++)\n    {\n        for(var j = 0; j < 9; j++)\n        {\n            if(arr[i][j] !== 'bomb')\n            {\n                var cnt_mines = 0;\n                for(var k = 0; k < 9; k++)\n                {\n                    var row_to_check = i + neighbor_rows[k];\n                    var col_to_check = j + neighbor_cols[k];\n                    if(row_to_check < 0 || row_to_check > 9 || col_to_check < 0 || col_to_check > 9)\n                    {\n                        continue;\n                    }\n                    else\n                    {\n                        try {\n                            if(arr[row_to_check][col_to_check] === 'bomb')\n                                {\n                                    cnt_mines++;\n                                }\n                        } catch (error) {\n                            //some NaN/undefined error we can ignore\n                        }\n                    }\n                }\n                arr[i][j] = cnt_mines;\n            }\n        }\n    }\n    return arr;\n}\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n\n        var init = [];\n        for(var i = 0; i < 9; i++)\n        {\n            init[i] = new Array(9);\n        }\n        init_board(init);\n\n        this.state = {\n            cells: init,\n            initial: init\n        } /*would probably be wise to keep a copy of the initial game board, hence the dupe.\n        thinking this would help with doing the recursive reveals. */\n\n        for(var k = 0; k < 9; k++)\n        {\n            for(var j = 0; j < 9; j++)\n            {\n                var val = init[k][j];\n                init[k][j] = this.renderCell(k, j, val, null);//<Cell row={k} col={j} value={val} face={null}/>;\n            }\n        }\n\n        this.setState({cells: init});\n    }\n\n    handleClick(row, col, value) {\n        var revealed_cells = [];\n        for(var i = 0; i < 9; i++)\n        {\n            revealed_cells[i] = new Array(9);\n        }\n        //at this point revealed_cells is an empty 2D 9x9 array\n        alert(this.state.initial[row][col]);\n        var neighbor_rows = [-1, -1, -1, 0, 0,   1, 1, 1];\n        var neighbor_cols = [-1,  0,  1, -1, 1, -1, 0, 1];\n\n        for(var k = 0; k < 9; k++)\n        {\n            for(var j = 0; j < 9; j++)\n            {\n                if(k === row && j === col)\n                {\n                    //we are on the Cell that is clicked.\n                    //at this point, the value can be either a 0, a number [1,8], or bomb -- 3 cases\n                    var face;\n                    if(value === 0)\n                    {\n                        face = 0;\n                        //this means that there are NO mines in the neighboring cells.\n                        //reveal all 8 neighbors.\n                        for(var m = 0; m < neighbor_rows.length; m++)\n                        {\n                            var row_to_check = k + neighbor_rows[m];\n                            var col_to_check = j + neighbor_cols[m];\n                            if(row_to_check < 0 || row_to_check > 9 || col_to_check < 0 || col_to_check > 9)\n                            {\n                                continue;\n                            }\n                            var val = this.state.init[row_to_check][col_to_check];\n                            // alert(\"\" + row_to_check + \" \" + col_to_check + \" \" + val);\n                            this.handleClick(row_to_check, col_to_check, val);\n                        }\n                    }\n                    else if(value === 'bomb')\n                    {\n                        face = '*';\n                    }\n                    else\n                    {\n                        face = value;\n                    }\n                    revealed_cells[k][j] = this.renderCell(row, col, value, face);\n                }\n                else\n                {\n                    revealed_cells[k][j] = this.state.cells[k][j];\n                }\n            }\n        }\n    \n        this.setState({cells: revealed_cells});\n    }\n\n    renderCell(r, c, v, f) {\n        return <Cell row={r} col={c} value={v} face={f} onClick={() => this.handleClick(r, c, v)}/>\n    }\n\n    render() {\n        return (\n            <div className=\"grid\">\n                {this.state.cells}\n            </div>\n        )\n    }\n}\n\nclass Game extends React.Component {\n    render() {\n        return(\n            <div>\n                <h2>React.Minesweeper</h2>\n                <Board />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n  );"]},"metadata":{},"sourceType":"module"}